
package com.soap.client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.0.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "PersonWebService", targetNamespace = "http://soap.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PersonWebService {


    /**
     * 
     * @return
     *     returns java.util.List<com.soap.client.Person>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPersons", targetNamespace = "http://soap.com/", className = "com.soap.client.GetPersons")
    @ResponseWrapper(localName = "getPersonsResponse", targetNamespace = "http://soap.com/", className = "com.soap.client.GetPersonsResponse")
    @Action(input = "http://soap.com/PersonWebService/getPersonsRequest", output = "http://soap.com/PersonWebService/getPersonsResponse")
    public List<Person> getPersons();

    /**
     * 
     * @param personName
     * @param personAge
     * @param personSurname
     * @param personGender
     * @param personPatronymic
     * @return
     *     returns java.lang.String
     * @throws ForIntException
     * @throws EmptyFieldException
     * @throws FieldValueException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createPerson", targetNamespace = "http://soap.com/", className = "com.soap.client.CreatePerson")
    @ResponseWrapper(localName = "createPersonResponse", targetNamespace = "http://soap.com/", className = "com.soap.client.CreatePersonResponse")
    @Action(input = "http://soap.com/PersonWebService/createPersonRequest", output = "http://soap.com/PersonWebService/createPersonResponse", fault = {
        @FaultAction(className = EmptyFieldException.class, value = "http://soap.com/PersonWebService/createPerson/Fault/EmptyFieldException"),
        @FaultAction(className = ForIntException.class, value = "http://soap.com/PersonWebService/createPerson/Fault/ForIntException"),
        @FaultAction(className = FieldValueException.class, value = "http://soap.com/PersonWebService/createPerson/Fault/FieldValueException")
    })
    public String createPerson(
        @WebParam(name = "personName", targetNamespace = "")
        String personName,
        @WebParam(name = "personPatronymic", targetNamespace = "")
        String personPatronymic,
        @WebParam(name = "personSurname", targetNamespace = "")
        String personSurname,
        @WebParam(name = "personAge", targetNamespace = "")
        String personAge,
        @WebParam(name = "personGender", targetNamespace = "")
        String personGender)
        throws EmptyFieldException, FieldValueException, ForIntException
    ;

    /**
     * 
     * @param personId
     * @return
     *     returns java.lang.String
     * @throws ForIntException
     * @throws IdNotExistsException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deletePerson", targetNamespace = "http://soap.com/", className = "com.soap.client.DeletePerson")
    @ResponseWrapper(localName = "deletePersonResponse", targetNamespace = "http://soap.com/", className = "com.soap.client.DeletePersonResponse")
    @Action(input = "http://soap.com/PersonWebService/deletePersonRequest", output = "http://soap.com/PersonWebService/deletePersonResponse", fault = {
        @FaultAction(className = ForIntException.class, value = "http://soap.com/PersonWebService/deletePerson/Fault/ForIntException"),
        @FaultAction(className = IdNotExistsException.class, value = "http://soap.com/PersonWebService/deletePerson/Fault/IdNotExistsException")
    })
    public String deletePerson(
        @WebParam(name = "person_id", targetNamespace = "")
        String personId)
        throws ForIntException, IdNotExistsException
    ;

    /**
     * 
     * @param personName
     * @param personAge
     * @param personSurname
     * @param personGender
     * @param personId
     * @param personPatronymic
     * @return
     *     returns java.lang.String
     * @throws ForIntException
     * @throws IdNotExistsException
     * @throws EmptyFieldException
     * @throws FieldValueException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updatePerson", targetNamespace = "http://soap.com/", className = "com.soap.client.UpdatePerson")
    @ResponseWrapper(localName = "updatePersonResponse", targetNamespace = "http://soap.com/", className = "com.soap.client.UpdatePersonResponse")
    @Action(input = "http://soap.com/PersonWebService/updatePersonRequest", output = "http://soap.com/PersonWebService/updatePersonResponse", fault = {
        @FaultAction(className = EmptyFieldException.class, value = "http://soap.com/PersonWebService/updatePerson/Fault/EmptyFieldException"),
        @FaultAction(className = ForIntException.class, value = "http://soap.com/PersonWebService/updatePerson/Fault/ForIntException"),
        @FaultAction(className = IdNotExistsException.class, value = "http://soap.com/PersonWebService/updatePerson/Fault/IdNotExistsException"),
        @FaultAction(className = FieldValueException.class, value = "http://soap.com/PersonWebService/updatePerson/Fault/FieldValueException")
    })
    public String updatePerson(
        @WebParam(name = "person_id", targetNamespace = "")
        String personId,
        @WebParam(name = "personName", targetNamespace = "")
        String personName,
        @WebParam(name = "personPatronymic", targetNamespace = "")
        String personPatronymic,
        @WebParam(name = "personSurname", targetNamespace = "")
        String personSurname,
        @WebParam(name = "personAge", targetNamespace = "")
        String personAge,
        @WebParam(name = "personGender", targetNamespace = "")
        String personGender)
        throws EmptyFieldException, FieldValueException, ForIntException, IdNotExistsException
    ;

}
